// Generated by CoffeeScript 1.4.0
(function() {
  var Router,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Application = {
    Models: {},
    Collections: {},
    Views: {},
    Templates: {},
    backend: "http://staging.discovery.my.usa.gov"
  };

  Application.Models.Page = (function(_super) {

    __extends(Page, _super);

    function Page() {
      return Page.__super__.constructor.apply(this, arguments);
    }

    Page.prototype.url = function() {
      return Application.backend + "/pages/" + this.id;
    };

    return Page;

  })(Backbone.Model);

  Application.Collections.Pages = (function(_super) {

    __extends(Pages, _super);

    function Pages() {
      return Pages.__super__.constructor.apply(this, arguments);
    }

    Pages.prototype.model = Application.Models.Page;

    Pages.prototype.url = function() {
      return Application.backend + "/pages";
    };

    return Pages;

  })(Backbone.Collection);

  Application.Models.Domain = (function(_super) {

    __extends(Domain, _super);

    function Domain() {
      return Domain.__super__.constructor.apply(this, arguments);
    }

    Domain.prototype.url = function() {
      return Application.backend + "/domains/" + this.id;
    };

    return Domain;

  })(Backbone.Model);

  Application.Collections.Domains = (function(_super) {

    __extends(Domains, _super);

    function Domains() {
      return Domains.__super__.constructor.apply(this, arguments);
    }

    Domains.prototype.model = Application.Models.Domain;

    Domains.prototype.query = "gov.";

    Domains.prototype.url = function() {
      return Application.backend + "/domains" + "?q=" + this.query;
    };

    Domains.prototype.parse = function(data) {
      if (data == null) {
        return;
      }
      _.map(data, function(domain) {
        var pages;
        pages = new Application.Collections.Pages;
        _.each(domain.pages, function(page) {
          return pages.add(new Application.Models.Page(page));
        });
        domain.pages = pages;
        return domain;
      });
      return data;
    };

    return Domains;

  })(Backbone.Collection);

  Application.Views.Home = (function(_super) {

    __extends(Home, _super);

    function Home() {
      return Home.__super__.constructor.apply(this, arguments);
    }

    Home.prototype.el = "#content";

    Home.prototype.render = function() {
      return this.$el.html(JST.home());
    };

    return Home;

  })(Backbone.View);

  Application.Views.Page = (function(_super) {

    __extends(Page, _super);

    function Page() {
      return Page.__super__.constructor.apply(this, arguments);
    }

    return Page;

  })(Backbone.View);

  Application.Views.Pages = (function(_super) {

    __extends(Pages, _super);

    function Pages() {
      return Pages.__super__.constructor.apply(this, arguments);
    }

    return Pages;

  })(Backbone.View);

  Application.Views.Domain = (function(_super) {

    __extends(Domain, _super);

    function Domain() {
      return Domain.__super__.constructor.apply(this, arguments);
    }

    return Domain;

  })(Backbone.View);

  Application.Views.Domains = (function(_super) {

    __extends(Domains, _super);

    function Domains() {
      this.render = __bind(this.render, this);
      return Domains.__super__.constructor.apply(this, arguments);
    }

    Domains.prototype.el = "#content";

    Domains.prototype.render = function() {
      return this.$el.html(JST.domains({
        domains: this.collection
      }));
    };

    return Domains;

  })(Backbone.View);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      "": "home",
      "domain/:query": "query"
    };

    Router.prototype.home = function() {
      var view;
      view = new Application.Views.Home();
      return view.render();
    };

    Router.prototype.query = function(query) {
      Application.domains = new Application.Collections.Domains();
      Application.domains.query = query;
      return Application.domains.fetch({
        success: function() {
          var view;
          view = new Application.Views.Domains({
            collection: Application.domains
          });
          return view.render();
        }
      });
    };

    return Router;

  })(Backbone.Router);

  Application.router = new Router();

  Backbone.history.start();

}).call(this);
